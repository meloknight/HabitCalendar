@using HabitCalendar.Models
@model CalendarInfoModel;

@{
    ViewData["Title"] = "Home Page";
}

<section id="calendar-section">

    <div id="days-of-week-container">
        <div class="day-of-week">Sunday</div>
        <div class="day-of-week">Monday</div>
        <div class="day-of-week">Tuesday</div>
        <div class="day-of-week">Wednesday</div>
        <div class="day-of-week">Thursday</div>
        <div class="day-of-week">Friday</div>
        <div class="day-of-week">Saturday</div>
    </div>

    <div id="greater-calendar-container">
        @{
            DateOnly todaysDate = DateOnly.FromDateTime(DateTime.Today);
            <div class="side-calendar-area">
                @{

                    if (Model.currentWeek.Count > 0){
                        <div class="side-container"> - @Model.monthNames[todaysDate.Month - 1] / @todaysDate.Year - </div>
                    }

                    if (Model.remainingWeeks.Count > 0) {
                        int weekIncrementer = 0;
                        bool isNewMonth = false;
                        foreach(CalendarDisplayModel day in Model.remainingWeeks){
                            if (weekIncrementer >= 7){ weekIncrementer = 0; }
                            if (day.Date.Day == 1) {
                                isNewMonth = true;
                            }
                            if (weekIncrementer == 6) {
                                if (isNewMonth == true) {
                                    <div class="side-container">
                                        <i class="fa-solid fa-arrow-up"></i>
                                        <div>
                                            @Model.monthNames[day.Date.Month -1] / @day.Date.Year
                                        </div>
                                    </div>
                                } else {
                                    <div class="side-container"></div>
                                }
                                isNewMonth = false;
                            }
                            weekIncrementer++;
                        }
                    }

                    if (Model.firstWeek.Count > 0) {
                        bool isNewMonthInFirstWeek = false;
                        int newMonthNumber = 0;
                        int newYearNumber = 0;
                        foreach (CalendarDisplayModel day in Model.firstWeek) {
                            if (day.Date.Day == 1) {
                                isNewMonthInFirstWeek = true;
                                newMonthNumber = day.Date.Month;
                                newYearNumber = day.Date.Year;
                            }
                        }
                        if (isNewMonthInFirstWeek == true) {
                            <div class="side-container">
                                <i class="fa-solid fa-arrow-up"></i>
                                <div>
                                    @Model.monthNames[newMonthNumber - 1] / @newYearNumber
                                </div>
                            </div>

                        } else {
                            <div class="side-container"></div>
                        }
                    }
                }

            </div>
        }
        <div id="calendar-container">
            @{
                if (Model != null) {
                    DateOnly currentDate = DateOnly.FromDateTime(DateTime.Today);
                    foreach(CalendarDisplayModel curr in Model.currentWeek){
                        if(curr.isVisible == true && curr.Date == currentDate){
                            <div class="day-container current-day">@curr.Date.Day</div>
                        }   
                        else if (curr.isVisible == true && currentDate.Month == curr.Date.Month) {
                            <div class="day-container">
                                <div class="day-container__inner-container">
                                    <div class="day-container__top-container">
                                        <div class="day-container__day">@curr.Date.Day</div>
                                        <div class="day-container__top-right">170.4</div>
                                    </div>
                                    <div class="day-container__middle-container">
                                        <div class="day-container__big-x"><i class="fa-solid fa-xmark"></i></div>
                                        <div class="day-container__circle"><i class="fa-solid fa-o"></i></div>
                                        <div class="day-container__star"><i class="fa-regular fa-star"></i></div>
                                    </div>
                                    <div class="day-container__bottom-container">
                                        04:22:05
                                    </div>
                                </div>
                            </div>
                        }
                        else if (curr.isVisible == true && currentDate.Month != curr.Date.Month)
                        {
                            <div class="day-container non-current-month">

                                @curr.Date.Day
                            </div>
                        }
                        else {
                            <div class="day-container day-not-visible"></div>
                        }
                    }
                }
            }

            @{
                if (Model != null && Model.remainingWeeks.Count > 0)
                {
                    DateOnly currentDate = DateOnly.FromDateTime(DateTime.Today);
                    foreach (CalendarDisplayModel remain in Model.remainingWeeks)
                    {
                        if (remain.isVisible == true && currentDate.Month == remain.Date.Month && currentDate.Year == remain.Date.Year)
                        {
                            <div class="day-container">@remain.Date.Day</div>
                        }
                        else if (remain.isVisible == true){
                            <div class="day-container non-current-month">@remain.Date.Day</div>
                        }
                        else
                        {
                            <div class="day-container day-not-visible"></div>
                        }
                    }
                }
            }

            @{
                if (Model != null && Model.firstWeek.Count > 0)
                {
                    DateOnly currentDate = DateOnly.FromDateTime(DateTime.Today);
                    foreach (CalendarDisplayModel first in Model.firstWeek)
                    {
                        if ( first.isVisible == true && currentDate.Month == first.Date.Month && currentDate.Year == first.Date.Year )
                        {
                            <div class="day-container">@first.Date.Day</div>
                        }
                        else if (first.isVisible == true){
                            <div class="day-container non-current-month">@first.Date.Day</div>
                        }
                        else
                        {
                            <div class="day-container day-not-visible"></div>
                        }
                    }
                }
            }
        </div>

        <div class="side-calendar-area">
            @{
                int weeksCountRightSide = 0;
                if (Model.currentWeek.Count > 0) { weeksCountRightSide++; }
                if (Model.firstWeek.Count > 0) { weeksCountRightSide++; }
                if (Model.remainingWeeks.Count > 0) {
                    weeksCountRightSide += Model.remainingWeeks.Count / 7;
                }
                for (int i = 0; i < weeksCountRightSide; i++) {
                    <div class="side-container"></div>
                }
            }
            </div>
        </div>
    </section>